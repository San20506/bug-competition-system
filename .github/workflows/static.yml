name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      # Create a build directory and organize static content
      - name: Prepare static files for deployment
        run: |
          mkdir -p _site
          
          # Create a main index.html for the competition portal
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Bug Hunting Competition - Static Demo</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  h1 { color: #333; text-align: center; margin-bottom: 30px; }
                  .site-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }
                  .site-card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; background: #f9f9f9; }
                  .site-card h3 { margin-top: 0; color: #2c5aa0; }
                  .site-card a { display: inline-block; margin-top: 10px; padding: 8px 15px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; }
                  .site-card a:hover { background: #0056b3; }
                  .note { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 15px; margin: 20px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üêõ Bug Hunting Competition - Template Showcase</h1>
                  <div class="note">
                      <strong>Note:</strong> This is a static demonstration of the competition templates. 
                      The full interactive competition system requires the Flask backend for team management, 
                      scoring, and file uploads.
                  </div>
                  
                  <div class="site-grid">
                      <div class="site-card">
                          <h3>üåä Site 1: Drinking Water Website</h3>
                          <p>Clean water solutions business website with modern design and service showcase.</p>
                          <p><strong>Bugs:</strong> 30 total (15 HTML + 15 CSS)</p>
                          <a href="site_1/">View Template</a>
                      </div>
                      
                      <div class="site-card">
                          <h3>üì± Site 2: Mobile App Landing</h3>
                          <p>Modern mobile application landing page with app downloads and feature highlights.</p>
                          <p><strong>Bugs:</strong> 30 total (15 HTML + 15 CSS)</p>
                          <a href="site_2/">View Template</a>
                      </div>
                      
                      <div class="site-card">
                          <h3>üõí Site 3: Online Shop</h3>
                          <p>E-commerce platform with product catalog and shopping cart functionality.</p>
                          <p><strong>Bugs:</strong> 30 total (15 HTML + 15 CSS)</p>
                          <a href="site_3/">View Template</a>
                      </div>
                      
                      <div class="site-card">
                          <h3>üìà Site 4: SEO Agency</h3>
                          <p>Digital marketing agency website with service portfolios and case studies.</p>
                          <p><strong>Bugs:</strong> 30 total (15 HTML + 15 CSS)</p>
                          <a href="site_4/">View Template</a>
                      </div>
                      
                      <div class="site-card">
                          <h3>üíπ Site 5: Stock Market Platform</h3>
                          <p>Financial trading platform with market data and portfolio management.</p>
                          <p><strong>Bugs:</strong> 30 total (15 HTML + 15 CSS)</p>
                          <a href="site_5/">View Template</a>
                      </div>
                  </div>
                  
                  <div style="margin-top: 40px; text-align: center; color: #666;">
                      <p><strong>Competition System Features:</strong></p>
                      <p>‚Ä¢ Real-time scoring ‚Ä¢ Team management ‚Ä¢ Timer functionality ‚Ä¢ File upload/download ‚Ä¢ Leaderboard</p>
                      <p><em>Full competition system available on Flask hosting platforms like Render or Railway</em></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          # Copy all bugged sites from templates/bugged_sites/
          if [ -d "templates/bugged_sites" ]; then
            # Copy each site folder
            for site_dir in templates/bugged_sites/site_*; do
              if [ -d "$site_dir" ]; then
                site_name=$(basename "$site_dir")
                echo "Copying $site_name..."
                cp -r "$site_dir" "_site/$site_name"
                
                # Remove any Python files or logs from the static deployment
                find "_site/$site_name" -name "*.py" -delete
                find "_site/$site_name" -name "*.log" -delete
                find "_site/$site_name" -name "bug_log.json" -delete
              fi
            done
          fi
          
          # Copy static assets if they exist
          if [ -d "static" ]; then
            cp -r static/* _site/ 2>/dev/null || true
          fi
          
          # Copy any additional assets
          if [ -d "attached_assets" ]; then
            cp -r attached_assets _site/ 2>/dev/null || true
          fi
          
          # List what we're deploying for debugging
          echo "üìÅ Contents being deployed:"
          find _site -type f | head -20
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the prepared static files
          path: '_site'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
